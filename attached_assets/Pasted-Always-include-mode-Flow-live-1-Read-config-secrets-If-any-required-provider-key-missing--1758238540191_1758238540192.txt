Always include mode.

Flow (live)
	1.	Read config & secrets. If any required provider key missing → fall back to dry-run (mock) and return mode:'mock'.
	2.	Pick/lease a proxy (if PROXY_POOL_URL set). Save proxy on a new Session row.
	3.	Create an email inbox (provider interface providers/email.py). Return address + receive API if applicable.
	4.	Initialize fingerprint & cookie jar (lightweight: store a JSON blob; no real browser yet).
	5.	Solve captcha via providers/captcha.py interface (no-op in dry mode).
	6.	Register Reddit account (HTTP client with randomized headers + proxy). If success, store:
	•	Account row: username, status=created, tenant_id
	•	Session row: proxy, fingerprint_json, cookies_json
	7.	If phone verification required:
	•	Use providers/sms.py to rent a number, submit code, confirm.
	•	Update status -> created.
	8.	Enqueue a warm job in queue.enqueue('warm_account', {account_id}).
	9.	Return JSON: {ok:true, mode, account_id, username, status}.

Providers (create minimal interfaces + env reads)
	•	providers/proxy.py: lease_proxy(hint) -> str|None, release_proxy(proxy).
	•	providers/email.py: create_inbox(provider) -> {address, inbox_id, receive_url?} (support dry mock).
	•	providers/sms.py: rent_number(provider) -> {phone, rental_id}, submit_code(rental_id, code).
	•	providers/captcha.py: solve(site_key, url) -> token.
	•	providers/reddit.py: register(username_hint, email, password, proxy, captcha_token) -> {ok, username, cookies} (mock if dry).
Put all keys in config.py and read via env.

Persistence
	•	Insert Account, Session with created_at=now(). Return ids.
	•	Store provider_notes (JSON) with any reference ids (sms rental, email inbox).

Errors
	•	On failure, set Account.status=failed, include reason in provider_notes, return {ok:false, mode, error} with 4xx.

Tests
	•	Unit tests for dry-run (no keys) and live (keys present but reddit.register mocked).

Also add
	•	Implement POST /api/v1/accounts/warm to enqueue warm_account job and return {ok, mode, account_id, status:'queued'} (real warm logic will come later).

Keep the contract stable — n8n will depend on these shapes.